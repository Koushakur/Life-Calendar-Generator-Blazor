@page "/app"
<PageTitle>App</PageTitle>
@rendermode InteractiveServer

<div class="container">
    <h2>Life Calendar Generator</h2>
    <p>To get started there's two options: Manually adding life periods or uploading a csv file</p>
    <p>There's no difference to the end result, the only difference being if you're more comfortable using a UI or a
        text editor</p>
    <p>For explanations of the options see the <a href="/howto">How-To page</a></p>

    <div class="appContainer">

        <div class="UI">

            <!-- Basic Options -->
            <label><input type="radio" name="inputOption" value="manual" checked="checked"
                          @onchange="InputOptionChanged"/> Manually add periods</label><br/>
            <label><input type="radio" name="inputOption" value="csv" @onchange="InputOptionChanged"/> Upload
                csv file</label><br/>
            <br/>
            @switch (_inputOption)
            {
                case "manual":
                    <button @onclick="AddBlankLpToList">Add new period</button>
                    break;
                case "csv":
                    <InputFile id="csvFilePicker" OnChange="OnInputFileChange" accept=".csv,.txt"/>
                    @if (!string.IsNullOrWhiteSpace(_inputFileResponse))
                    {
                        <p class="responseText">@_inputFileResponse</p>
                    }

                    break;
            }

            @if (_periodsToRender != null! && _periodsToRender.Count > 0)
            {
                <br/>
                <div class="mt-3" style="display: flex; gap: 5px;">
                    <button class="" @onclick="RenderAllPeriods">Update preview</button>

                    @if (_imgBytes != null)
                    {
                        <button @onclick="DownloadToFile">Download image</button>
                        <button
                            @onclick="async () => { if (_imgBytes != null) await ImageDb!.AddImageToDb(_imgBytes); }">
                            Upload to showcase
                        </button>
                    }
                </div>

                <input class="mt-3" type="text" @bind="_title"/>
                <label>
                    <input type="checkbox" @bind="_visibleTitle"/> Display title
                </label>

                <br/>
                <button class="mt-3 mb-1" @onclick="() => _showAdvancedOptions = !_showAdvancedOptions">
                    @(_showAdvancedOptions ? "Hide Advanced Options" : "Show Advanced Options")
                </button>

                <!-- Advanced options -->
                @if (_showAdvancedOptions)
                {
                    <div class="border">
                        <label><input type="number" @bind="_rows" @bind:after="UpdateBoundaryRect" class="mb-1"/> Total
                            amount of years</label>
                        <br/>
                        <label class="mt-1"><input type="checkbox" @bind="_visibleWeekNumbers"/> Show week
                            numbers</label>
                        <label><input type="checkbox" @bind="_visibleYearNumbers"/> Show year numbers</label>
                        <label class="mt-1"><input type="checkbox" @bind=@_visibleEventNames/> Show event names</label>

                        @* Circle style *@
                        <div class="border mt-2">
                            <h6>Circle Styling</h6>
                            <label>Color:
                                <input type="color" value="@_colorCircle.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Circles)"/></label>
                            <label>Radius: <input type="number" @bind="_circleRadius"/></label>
                            <label>Stroke Width: <input type="number" @bind="_strokeWidth"/></label>
                        </div>

                        @* Doc colors *@
                        <div class="border">
                            <h6>Document Colors</h6>
                            <label>Background Color:
                                <input type="color" value="@_colorBackground.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Background)"/></label>
                            <label>Text Color:
                                <input type="color" value="@_colorText.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Text)"/></label>
                        </div>

                        @* Margin *@
                        <div class="border">
                            <h6>Margin</h6>
                            <label>Top:
                                <input type="number" @bind="_topBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Left:
                                <input type="number" @bind="_leftBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Right:
                                <input type="number" @bind="_rightBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Bottom:
                                <input type="number" @bind="_bottomBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                        </div>

                        @* Font *@
                        <div class="fontLoad border">
                            <h6>Change font</h6>
                            <p class="finePrint">Gets loaded from Google Fonts</p>
                            <input type="text" @bind="_fontName" placeholder="Enter font name"/>
                            <button @onclick="OnClickLoadFont">Try to load</button>
                            @if (!String.IsNullOrWhiteSpace(_fontResponse))
                            {
                                <p class="responseText">@_fontResponse</p>
                            }
                        </div>

                        <button class="mt-3" @onclick="RandomizeAllColors">Randomize All Colors</button>
                    </div>
                }

                <!-- List of periods -->
                <div class="border">
                    <h6>List</h6>
                    <ul id="lpList">
                        @for (var i = 0; i < _periodsToRender.Count; i++)
                        {
                            var period = _periodsToRender[i];
                            var tI = i;
                            <li>
                                <!-- Sorting buttons -->
                                <div class="ButtonSortRemoveContainer">
                                    <button
                                        @onclick="async () => { _periodsToRender.RemoveAt(tI); await SaveListToSessionStorage(); }"
                                        class="ButtonSortRemove">
                                        -
                                    </button>

                                    @if (tI > 0)
                                    {
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { var tLP = _periodsToRender[tI]; _periodsToRender.RemoveAt(tI); _periodsToRender.Insert(0, tLP); }">
                                            &UpArrowBar;
                                        </button>
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { SwapPeriods(tI, tI - 1); }">
                                            &uarr;
                                        </button>
                                    }
                                    else
                                    {
                                        if (_periodsToRender.Count != 1)
                                        {
                                            <button class="ButtonSortRemove invisible"></button>
                                            <button class="ButtonSortRemove invisible"></button>
                                        }
                                    }

                                    @if (tI < _periodsToRender.Count - 1)
                                    {
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { SwapPeriods(tI, tI + 1); }">
                                            &darr;
                                        </button>
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { var tLP = _periodsToRender[tI]; _periodsToRender.RemoveAt(tI); _periodsToRender.Insert(_periodsToRender.Count, tLP); }">
                                            &DownArrowBar;
                                        </button>
                                    }
                                    else
                                    {
                                        if (_periodsToRender.Count != 1)
                                        {
                                            <button class="ButtonSortRemove invisible"></button>
                                            <button class="ButtonSortRemove invisible"></button>
                                        }
                                    }
                                </div>

                                <input type="date" @bind=_periodsToRender[tI].DateFrom/>

                                <input type="date" @bind=_periodsToRender[tI].DateTo/>

                                <input type="color" @bind=@period.SkiaColor>
                                @if (_visibleEventNames)
                                {
                                    <input class="ms-1" type="text" @bind=@period.NameOfEvent/>
                                    <label class="mt-1"><input type="checkbox" @bind=@period.Hidden/> Hide name</label>
                                }
                            </li>
                        }
                    </ul>
                </div>
            }

        </div>

        <div @ref="_imageContainer" class="imageContainer"></div>
    </div>

</div>