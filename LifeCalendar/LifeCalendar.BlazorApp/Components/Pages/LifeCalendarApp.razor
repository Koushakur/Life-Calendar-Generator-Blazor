@page "/app"
<PageTitle>App</PageTitle>
@rendermode InteractiveServer

<div class="container">
    <h3>Life Calendar Generator</h3>
    <p>To get started there's two options: Manually adding life periods or uploading a csv file</p>
    <p>There's no difference to the end result, the only difference being if you're more comfortable using a UI or a
        text editor</p>
    <p>For explanations of the options see the <a href="/howto">How-To page</a></p>

    <div class="main">
        @* Auto-update, for now more trouble tha it's worth, consider it later *@
        @* <label for="AutoUpdate">Auto-update every change</label> *@
        @* <input @bind="_autoUpdate" id="AutoUpdate" type="checkbox"/> *@
        @* <br/> *@
        <div class="UI">

            <!-- Basic Options -->
            <label><input type="radio" name="inputOption" value="manual" checked="checked"
                          @onchange="(e) => InputOptionChanged(e)"/> Manually add periods</label><br/>
            <label><input type="radio" name="inputOption" value="csv" @onchange="(e) => InputOptionChanged(e)"/> Upload
                csv
                file</label><br/>
            <br/>
            @switch (_inputOption)
            {
                case "manual":
                    <button @onclick="AddBlankLpToList">Add new period</button>
                    break;
                case "csv":
                    <InputFile id="csvFilePicker" OnChange="OnInputFileChange" accept=".csv,.txt"/>
                    @if (!String.IsNullOrWhiteSpace(_inputFileResponse))
                    {
                        <p class="responseText">@_inputFileResponse</p>
                    }

                    break;
            }

            @if (_periodsToRender != null && _periodsToRender.Count > 0)
            {
                <br/>
                <button class="mt-3" @onclick="RenderAllPeriods">Update preview</button>

                @if (_imgBytes != null)
                {
                    <button @onclick="DownloadToFile">Download image</button>
                    <button @onclick="async () => { if (_imgBytes != null) await ImageDb.AddImageToDb(_imgBytes); }">
                        Upload to showcase
                    </button>
                }

                @* <label> *@
                @*     <input type="checkbox" @bind="_visibleSortRemove"/> Sort and remove buttons *@
                @* </label> *@

                <br/>
                <input class="mt-3" @bind="_title"/>
                <label>
                    <input type="checkbox" @bind="_visibleTitle"/> Display title
                </label>

                <br/>
                <button class="mt-3" @onclick="() => _showAdvancedOptions = !_showAdvancedOptions">
                    @(_showAdvancedOptions ? "Hide Advanced Options" : "Show Advanced Options")
                </button>

                @if (_showAdvancedOptions)
                {
                    <div class="border">
                        <label><input type="number" @bind="_rows"/> Total amount of years</label>
                        <br/>
                        <label class="mt-1"><input type="checkbox" @bind="_visibleWeekNumbers"/> Show week
                            numbers</label>
                        <label><input type="checkbox" @bind="_visibleYearNumbers"/> Show year numbers</label>

                        <div class="border">
                            <h6>Circle Styling</h6>
                            <label>Color:
                                <input type="color" value="@_colorCircle.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Circles)"/></label>
                            <label>Radius: <input type="number" @bind="_circleRadius"/></label>
                            <label>Stroke Width: <input type="number" @bind="_strokeWidth"/></label>
                        </div>

                        <div class="border">
                            <h6>Document Colors</h6>
                            <label>Background Color:
                                <input type="color" value="@_colorBackground.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Background)"/></label>
                            <label>Text Color:
                                <input type="color" value="@_colorText.ToString().Remove(1, 2)"
                                       @onchange="(e) => OnChangedColor(e, Colors.Text)"/></label>
                        </div>

                        <div class="border">
                            <h6>Margin</h6>
                            <label>Top:
                                <input type="number" @bind="_topBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Left:
                                <input type="number" @bind="_leftBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Right:
                                <input type="number" @bind="_rightBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                            <label>Bottom:
                                <input type="number" @bind="_bottomBorder"
                                       @bind:after="UpdateBoundaryRect"/></label>
                        </div>

                        <div class="fontLoad border">
                            <h6>Change font</h6>
                            <p class="finePrint">Gets loaded from Google Fonts</p>
                            <input @bind="_fontName" placeholder="Enter font name"/>
                            <button @onclick="OnClickLoadFont">Try to load</button>
                            @if (!String.IsNullOrWhiteSpace(_fontResponse))
                            {
                                <p class="responseText">@_fontResponse</p>
                            }
                        </div>
                    </div>
                }


                <!-- List of periods -->
                <div class="border">
                    <h6>List</h6>
                    <ul id="lpList">
                        @for (var i = 0; i < _periodsToRender.Count; i++)
                        {
                            var period = _periodsToRender[i];
                            var tI = i;
                            <li>
                                @if (_visibleSortRemove)
                                {
                                    <button @onclick="() => _periodsToRender.RemoveAt(tI)" class="ButtonSortRemove">-
                                    </button>

                                    if (tI > 0)
                                    {
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { var tLP = _periodsToRender[tI]; _periodsToRender.RemoveAt(tI); _periodsToRender.Insert(0, tLP); }">
                                            &UpArrowBar;
                                        </button>
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { (_periodsToRender[tI], _periodsToRender[tI - 1]) = (_periodsToRender[tI - 1], _periodsToRender[tI]); }">
                                            &uarr;
                                        </button>
                                    }
                                    else
                                    {
                                        if (_periodsToRender.Count != 1)
                                        {
                                            <span class="ButtonSortRemove"></span>
                                            <span class="ButtonSortRemove"></span>
                                        }
                                    }

                                    if (tI < _periodsToRender.Count - 1)
                                    {
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { (_periodsToRender[tI], _periodsToRender[tI + 1]) = (_periodsToRender[tI + 1], _periodsToRender[tI]); }">
                                            &darr;
                                        </button>
                                        <button class="ButtonSortRemove"
                                                @onclick="() => { var tLP = _periodsToRender[tI]; _periodsToRender.RemoveAt(tI); _periodsToRender.Insert(_periodsToRender.Count, tLP); }">
                                            &DownArrowBar;
                                        </button>
                                    }
                                    else
                                    {
                                        if (_periodsToRender.Count != 1)
                                        {
                                            <span class="ButtonSortRemove"></span>
                                            <span class="ButtonSortRemove"></span>
                                        }
                                    }
                                }

                                <input type="date"
                                       @bind:get="GetFromDateValue(tI)"
                                       @bind:set="async (newValue) => { await SetFromDateValue(newValue, tI); await OnChangedDate(tI); }"/>

                                <input type="date"
                                       @bind:get="GetToDateValue(tI)"
                                       @bind:set="async (newValue) => { await SetToDateValue(newValue, tI); await OnChangedDate(tI); }"/>

                                <input type="color" @bind=@period.SkiaColor>
                                <input @bind=@period.NameOfEvent/>
                                <Dropdown>
                                    <DropdownToggleButton>@period.NamePlacementStrat</DropdownToggleButton>
                                    <DropdownMenu>
                                        <DropdownHeader>Placement</DropdownHeader>
                                        @foreach (var strat in Enum.GetValues<NameStrategy>())
                                        {
                                            <DropdownItem @onclick="() => { period.NamePlacementStrat = strat; }">
                                                @strat
                                            </DropdownItem>
                                        }
                                    </DropdownMenu>
                                </Dropdown>
                            </li>
                        }
                    </ul>
                </div>
            }

        </div>

        <div @ref="_imageContainer" class="imageContainer"></div>
    </div>

    @* <button @onclick="DownloadToFile">Download</button> *@
    @* <button @onclick="RandomizeAllColors">Randomize All Colors</button> *@
    @* <button @onclick="async () => { if (_imgBytes != null) await ImageDb.AddImageToDb(_imgBytes); }"> *@
    @*     Upload preview image to database *@
    @* </button> *@

</div>